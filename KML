<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste KML - Debug</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .test-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 6px;
        }
        .success {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        .warning {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }
        .info {
            background: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }
        pre {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            font-size: 12px;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #0056b3;
        }
        .input-group {
            margin: 10px 0;
        }
        input[type="text"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-top: 5px;
        }
        .results {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç Teste de KML - Debug Tool</h1>
        <p>Use esta ferramenta para testar se o arquivo KML est√° acess√≠vel e v√°lido.</p>
        
        <div class="input-group">
            <label for="kml-url"><strong>URL do Google Drive:</strong></label>
            <input type="text" id="kml-url" placeholder="https://drive.google.com/file/d/.../view?usp=drivesdk" 
                   value="https://drive.google.com/file/d/18bhHzhUZc5XKv0fclYfy8ZCLY5uR3Ne6/view?usp=drivesdk">
        </div>
        
        <div>
            <button onclick="testKMLAccess()">üß™ Testar Acesso ao KML</button>
            <button onclick="testAllMethods()">üîÑ Testar Todos os M√©todos</button>
            <button onclick="clearResults()">üóëÔ∏è Limpar Resultados</button>
        </div>
        
        <div id="results">
            <!-- Resultados aparecer√£o aqui -->
        </div>
    </div>

    <script>
        function addResult(message, type = 'info') {
            const results = document.getElementById('results');
            const div = document.createElement('div');
            div.className = `test-section ${type}`;
            div.innerHTML = `
                <strong>[${new Date().toLocaleTimeString()}]</strong> ${message}
            `;
            results.appendChild(div);
            results.scrollTop = results.scrollHeight;
        }

        function clearResults() {
            document.getElementById('results').innerHTML = '';
        }

        // Extrair ID do arquivo de diferentes formatos de URL
        function extractFileId(url) {
            const patterns = [
                /\/file\/d\/([a-zA-Z0-9-_]+)/,
                /id=([a-zA-Z0-9-_]+)/,
                /\/d\/([a-zA-Z0-9-_]+)/
            ];
            
            for (const pattern of patterns) {
                const match = url.match(pattern);
                if (match) {
                    return match[1];
                }
            }
            
            throw new Error('N√£o foi poss√≠vel extrair ID do arquivo da URL');
        }

        // Converter URL do Google Drive para download direto
        function convertGoogleDriveUrl(url) {
            const fileId = extractFileId(url);
            return `https://drive.google.com/uc?export=download&id=${fileId}`;
        }

        async function testKMLAccess() {
            const url = document.getElementById('kml-url').value.trim();
            
            if (!url) {
                addResult('‚ùå Por favor, insira uma URL', 'error');
                return;
            }

            addResult(`üîç Testando URL: ${url}`, 'info');

            try {
                // Extrair File ID
                const fileId = extractFileId(url);
                addResult(`‚úÖ File ID extra√≠do: ${fileId}`, 'success');

                // Converter para URL de download
                const downloadUrl = convertGoogleDriveUrl(url);
                addResult(`üîó URL de download: <pre>${downloadUrl}</pre>`, 'info');

                // Testar acesso
                addResult('üåê Testando acesso ao arquivo...', 'info');
                
                const response = await fetch(downloadUrl, {
                    method: 'HEAD', // Apenas verificar se existe
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (compatible; KMLTestBot/1.0)'
                    }
                });

                addResult(`üì° Status HTTP: ${response.status} (${response.statusText})`, 
                         response.ok ? 'success' : 'error');

                if (response.ok) {
                    const contentType = response.headers.get('Content-Type');
                    const contentLength = response.headers.get('Content-Length');
                    
                    addResult(`üìÑ Content-Type: ${contentType || 'N/A'}`, 'info');
                    addResult(`üìè Content-Length: ${contentLength || 'N/A'} bytes`, 'info');

                    // Tentar baixar o conte√∫do
                    addResult('‚¨áÔ∏è Baixando conte√∫do...', 'info');
                    const contentResponse = await fetch(downloadUrl);
                    const content = await contentResponse.text();
                    
                    addResult(`üì¶ Tamanho do conte√∫do baixado: ${content.length} caracteres`, 'success');
                    
                    // Mostrar primeiros 500 caracteres
                    const preview = content.substring(0, 500);
                    addResult(`üëÄ Preview do conte√∫do:<pre>${preview}${content.length > 500 ? '...' : ''}</pre>`, 'info');
                    
                    // Verificar se √© KML v√°lido
                    if (content.includes('<kml') || content.includes('<coordinates')) {
                        addResult('‚úÖ Arquivo parece ser KML v√°lido!', 'success');
                        
                        // Contar coordenadas
                        const coordMatches = content.match(/<coordinates[^>]*>([\s\S]*?)<\/coordinates>/gi);
                        if (coordMatches) {
                            addResult(`üìç Encontradas ${coordMatches.length} se√ß√µes de coordenadas`, 'success');
                        }
                    } else {
                        addResult('‚ö†Ô∏è Arquivo n√£o parece ser KML v√°lido', 'warning');
                    }
                } else {
                    addResult('‚ùå N√£o foi poss√≠vel acessar o arquivo. Verifique se ele est√° p√∫blico.', 'error');
                }

            } catch (error) {
                addResult(`‚ùå Erro: ${error.message}`, 'error');
                console.error('Erro completo:', error);
            }
        }

        async function testAllMethods() {
            const url = document.getElementById('kml-url').value.trim();
            
            if (!url) {
                addResult('‚ùå Por favor, insira uma URL', 'error');
                return;
            }

            addResult('üß™ Testando todos os m√©todos de acesso...', 'info');

            const fileId = extractFileId(url);
            
            const methods = [
                {
                    name: 'M√©todo 1: drive.google.com/uc',
                    url: `https://drive.google.com/uc?export=download&id=${fileId}`
                },
                {
                    name: 'M√©todo 2: docs.google.com/uc',
                    url: `https://docs.google.com/uc?export=download&id=${fileId}`
                },
                {
                    name: 'M√©todo 3: Proxy CORS',
                    url: `https://api.allorigins.win/get?url=${encodeURIComponent(`https://drive.google.com/uc?export=download&id=${fileId}`)}`
                }
            ];

            for (const method of methods) {
                try {
                    addResult(`üîÑ Testando: ${method.name}`, 'info');
                    addResult(`üîó URL: <pre>${method.url}</pre>`, 'info');
                    
                    const response = await fetch(method.url, {
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (compatible; KMLTestBot/1.0)'
                        }
                    });
                    
                    addResult(`üì° ${method.name} - Status: ${response.status}`, 
                             response.ok ? 'success' : 'error');
                    
                    if (response.ok) {
                        const text = await response.text();
                        
                        // Para o m√©todo proxy, extrair o conte√∫do
                        let content = text;
                        if (method.name.includes('Proxy')) {
                            try {
                                const data = JSON.parse(text);
                                content = data.contents || text;
                            } catch (e) {
                                content = text;
                            }
                        }
                        
                        addResult(`üì¶ ${method.name} - Tamanho: ${content.length} caracteres`, 'info');
                        
                        if (content.includes('<kml') || content.includes('<coordinates')) {
                            addResult(`‚úÖ ${method.name} - KML v√°lido encontrado!`, 'success');
                        } else {
                            addResult(`‚ö†Ô∏è ${method.name} - N√£o parece ser KML`, 'warning');
                        }
                    }
                    
                } catch (error) {
                    addResult(`‚ùå ${method.name} - Erro: ${error.message}`, 'error');
                }
                
                // Pequena pausa entre testes
                await new Promise(resolve => setTimeout(resolve, 500));
            }
            
            addResult('üèÅ Teste de todos os m√©todos conclu√≠do!', 'info');
        }

        // Testar automaticamente ao carregar a p√°gina
        window.addEventListener('load', () => {
            addResult('üöÄ Ferramenta de teste KML carregada', 'success');
            addResult('‚ÑπÔ∏è Insira a URL do Google Drive e clique em "Testar Acesso ao KML"', 'info');
        });
    </script>
</body>
</html>
